{"ast":null,"code":"import { makeAutoObservable } from \"mobx\";\n\nclass CanvasState {\n  constructor() {\n    this.canvas = null;\n    this.undoList = [];\n    this.redoList = [];\n    makeAutoObservable(this);\n  }\n\n  setCanvas(canvas) {\n    this.canvas = canvas;\n  }\n\n  pushToUndoList(data) {\n    this.undoList.push(data);\n  }\n\n  pushToRedoList(data) {\n    this.redoList.push(data);\n  }\n\n  undo() {\n    let ctx = this.canvas.getContext('2d');\n\n    if (this.undoList.length > 0) {\n      let dataUrl = this.undoList.pop();\n    } else {}\n  }\n\n}\n\nexport default new CanvasState();","map":{"version":3,"sources":["/Users/alinagalusko/WebstormProjects/react-paint/src/store/canvasState.js"],"names":["makeAutoObservable","CanvasState","constructor","canvas","undoList","redoList","setCanvas","pushToUndoList","data","push","pushToRedoList","undo","ctx","getContext","length","dataUrl","pop"],"mappings":"AAAA,SAAQA,kBAAR,QAAiC,MAAjC;;AAEA,MAAMC,WAAN,CAAkB;AAKdC,EAAAA,WAAW,GAAG;AAAA,SAJdC,MAIc,GAJL,IAIK;AAAA,SAHdC,QAGc,GAHH,EAGG;AAAA,SAFdC,QAEc,GAFH,EAEG;AACVL,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;;AAEDM,EAAAA,SAAS,CAACH,MAAD,EAAS;AACd,SAAKA,MAAL,GAAcA,MAAd;AACH;;AAEDI,EAAAA,cAAc,CAACC,IAAD,EAAO;AACjB,SAAKJ,QAAL,CAAcK,IAAd,CAAmBD,IAAnB;AACH;;AAEDE,EAAAA,cAAc,CAACF,IAAD,EAAO;AACjB,SAAKH,QAAL,CAAcI,IAAd,CAAmBD,IAAnB;AACH;;AAEDG,EAAAA,IAAI,GAAG;AACH,QAAIC,GAAG,GAAG,KAAKT,MAAL,CAAYU,UAAZ,CAAuB,IAAvB,CAAV;;AACA,QAAG,KAAKT,QAAL,CAAcU,MAAd,GAAuB,CAA1B,EAA6B;AACzB,UAAIC,OAAO,GAAG,KAAKX,QAAL,CAAcY,GAAd,EAAd;AACH,KAFD,MAEO,CAEN;AACJ;;AA5Ba;;AA+BlB,eAAe,IAAIf,WAAJ,EAAf","sourcesContent":["import {makeAutoObservable} from \"mobx\";\n\nclass CanvasState {\n    canvas = null;\n    undoList = [];\n    redoList = [];\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    setCanvas(canvas) {\n        this.canvas = canvas;\n    }\n\n    pushToUndoList(data) {\n        this.undoList.push(data);\n    }\n\n    pushToRedoList(data) {\n        this.redoList.push(data);\n    }\n\n    undo() {\n        let ctx = this.canvas.getContext('2d');\n        if(this.undoList.length > 0) {\n            let dataUrl = this.undoList.pop();\n        } else {\n\n        }\n    }\n}\n\nexport default new CanvasState();"]},"metadata":{},"sourceType":"module"}