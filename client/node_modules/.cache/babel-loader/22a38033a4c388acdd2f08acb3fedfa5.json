{"ast":null,"code":"import { makeAutoObservable } from \"mobx\";\n\nclass CanvasState {\n  constructor() {\n    this.canvas = null;\n    this.undoList = [];\n    this.redoList = [];\n    makeAutoObservable(this);\n  }\n\n  setCanvas(canvas) {\n    this.canvas = canvas;\n  }\n\n  pushToUndoList(data) {\n    this.undoList.push(data);\n  }\n\n  pushToRedoList(data) {\n    this.redoList.push(data);\n  }\n\n  undo() {\n    let ctx = this.canvas.getContext('2d');\n\n    if (this.undoList.length > 0) {\n      let dataUrl = this.undoList.pop();\n      this.redoList.push(this.canvas.toDataURL());\n      let img = new Image();\n      img.src = dataUrl;\n\n      img.onload = () => {\n        ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        ctx.drawImage(img, 0, 0, this.canvas.width, this.canvas.height);\n      };\n    } else {\n      ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n  }\n\n  redo() {\n    let ctx = this.canvas.getContext('2d');\n\n    if (this.redoList.length > 0) {\n      let dataUrl = this.redoList.pop();\n      this.undoList.push(this.canvas.toDataURL());\n      let img = new Image();\n      img.src = dataUrl;\n\n      img.onload = () => {\n        ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        ctx.drawImage(img, 0, 0, this.canvas.width, this.canvas.height);\n      };\n    }\n  }\n\n}\n\nexport default new CanvasState();","map":{"version":3,"sources":["/Users/alinagalusko/WebstormProjects/react-paint/client/src/store/canvasState.js"],"names":["makeAutoObservable","CanvasState","constructor","canvas","undoList","redoList","setCanvas","pushToUndoList","data","push","pushToRedoList","undo","ctx","getContext","length","dataUrl","pop","toDataURL","img","Image","src","onload","clearRect","width","height","drawImage","redo"],"mappings":"AAAA,SAAQA,kBAAR,QAAiC,MAAjC;;AAEA,MAAMC,WAAN,CAAkB;AAKdC,EAAAA,WAAW,GAAG;AAAA,SAJdC,MAIc,GAJL,IAIK;AAAA,SAHdC,QAGc,GAHH,EAGG;AAAA,SAFdC,QAEc,GAFH,EAEG;AACVL,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;;AAEDM,EAAAA,SAAS,CAACH,MAAD,EAAS;AACd,SAAKA,MAAL,GAAcA,MAAd;AACH;;AAEDI,EAAAA,cAAc,CAACC,IAAD,EAAO;AACjB,SAAKJ,QAAL,CAAcK,IAAd,CAAmBD,IAAnB;AACH;;AAEDE,EAAAA,cAAc,CAACF,IAAD,EAAO;AACjB,SAAKH,QAAL,CAAcI,IAAd,CAAmBD,IAAnB;AACH;;AAEDG,EAAAA,IAAI,GAAG;AACH,QAAIC,GAAG,GAAG,KAAKT,MAAL,CAAYU,UAAZ,CAAuB,IAAvB,CAAV;;AACA,QAAG,KAAKT,QAAL,CAAcU,MAAd,GAAuB,CAA1B,EAA6B;AACzB,UAAIC,OAAO,GAAG,KAAKX,QAAL,CAAcY,GAAd,EAAd;AACA,WAAKX,QAAL,CAAcI,IAAd,CAAmB,KAAKN,MAAL,CAAYc,SAAZ,EAAnB;AACA,UAAIC,GAAG,GAAG,IAAIC,KAAJ,EAAV;AACAD,MAAAA,GAAG,CAACE,GAAJ,GAAUL,OAAV;;AACAG,MAAAA,GAAG,CAACG,MAAJ,GAAa,MAAM;AACfT,QAAAA,GAAG,CAACU,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAqB,KAAKnB,MAAL,CAAYoB,KAAjC,EAAwC,KAAKpB,MAAL,CAAYqB,MAApD;AACAZ,QAAAA,GAAG,CAACa,SAAJ,CAAcP,GAAd,EAAmB,CAAnB,EAAsB,CAAtB,EAA0B,KAAKf,MAAL,CAAYoB,KAAtC,EAA6C,KAAKpB,MAAL,CAAYqB,MAAzD;AACH,OAHD;AAIH,KATD,MASO;AACHZ,MAAAA,GAAG,CAACU,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoB,KAAKnB,MAAL,CAAYoB,KAAhC,EAAuC,KAAKpB,MAAL,CAAYqB,MAAnD;AACH;AACJ;;AAEDE,EAAAA,IAAI,GAAG;AACH,QAAId,GAAG,GAAG,KAAKT,MAAL,CAAYU,UAAZ,CAAuB,IAAvB,CAAV;;AACA,QAAG,KAAKR,QAAL,CAAcS,MAAd,GAAuB,CAA1B,EAA6B;AACzB,UAAIC,OAAO,GAAG,KAAKV,QAAL,CAAcW,GAAd,EAAd;AACA,WAAKZ,QAAL,CAAcK,IAAd,CAAmB,KAAKN,MAAL,CAAYc,SAAZ,EAAnB;AACA,UAAIC,GAAG,GAAG,IAAIC,KAAJ,EAAV;AACAD,MAAAA,GAAG,CAACE,GAAJ,GAAUL,OAAV;;AACAG,MAAAA,GAAG,CAACG,MAAJ,GAAa,MAAM;AACfT,QAAAA,GAAG,CAACU,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAqB,KAAKnB,MAAL,CAAYoB,KAAjC,EAAwC,KAAKpB,MAAL,CAAYqB,MAApD;AACAZ,QAAAA,GAAG,CAACa,SAAJ,CAAcP,GAAd,EAAmB,CAAnB,EAAsB,CAAtB,EAA0B,KAAKf,MAAL,CAAYoB,KAAtC,EAA6C,KAAKpB,MAAL,CAAYqB,MAAzD;AACH,OAHD;AAIH;AACJ;;AAjDa;;AAoDlB,eAAe,IAAIvB,WAAJ,EAAf","sourcesContent":["import {makeAutoObservable} from \"mobx\";\n\nclass CanvasState {\n    canvas = null;\n    undoList = [];\n    redoList = [];\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    setCanvas(canvas) {\n        this.canvas = canvas;\n    }\n\n    pushToUndoList(data) {\n        this.undoList.push(data);\n    }\n\n    pushToRedoList(data) {\n        this.redoList.push(data);\n    }\n\n    undo() {\n        let ctx = this.canvas.getContext('2d');\n        if(this.undoList.length > 0) {\n            let dataUrl = this.undoList.pop();\n            this.redoList.push(this.canvas.toDataURL());\n            let img = new Image();\n            img.src = dataUrl;\n            img.onload = () => {\n                ctx.clearRect(0, 0 , this.canvas.width, this.canvas.height);\n                ctx.drawImage(img, 0, 0 , this.canvas.width, this.canvas.height);\n            }\n        } else {\n            ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        }\n    }\n\n    redo() {\n        let ctx = this.canvas.getContext('2d');\n        if(this.redoList.length > 0) {\n            let dataUrl = this.redoList.pop();\n            this.undoList.push(this.canvas.toDataURL());\n            let img = new Image();\n            img.src = dataUrl;\n            img.onload = () => {\n                ctx.clearRect(0, 0 , this.canvas.width, this.canvas.height);\n                ctx.drawImage(img, 0, 0 , this.canvas.width, this.canvas.height);\n            }\n        }\n    }\n}\n\nexport default new CanvasState();"]},"metadata":{},"sourceType":"module"}